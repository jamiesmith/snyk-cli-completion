##################################################
## Command: snyk auth
##################################################
# Auth
# Usage
#   snyk auth [<API_TOKEN>] [<OPTIONS>]
# 
# Description
#   The snyk auth command authenticates your machine to associate the Snyk CLI with your Snyk account.
# 
#   Running $ snyk auth opens a browser window with prompts to log in to your Snyk account and
#   authenticate. No repository permissions are needed at this stage, only your email address.
# 
#   When you have authenticated you can start using the CLI; see Getting started with the CLI
#   https://docs.snyk.io/snyk-cli/getting-started-with-the-cli
# 
# Value
#   In some environments and configurations you must use the <API_TOKEN>; see Authenticate the
#   CLI with your account https://docs.snyk.io/features/snyk-cli/authenticate-the-cli-with-your-account
# 
#   The value may be a user token or a service account; see Service accounts
#   https://docs.snyk.io/features/integrations/managing-integrations/service-accounts
# 
#   In a CI/CD environment use the SNYK_TOKEN environment variable; see Configure the Snyk CLI
#   https://docs.snyk.io/features/snyk-cli/configure-the-snyk-cli
# 
#   After setting this environment variable you can use CLI commands.
# 
# Debug
#   Use the -d option to output the debug logs.
# 
# 



##################################################
## Command: snyk code
##################################################
# Code
# Usage
#   snyk code [<SUBCOMMAND>] [<OPTIONS>] [<PATH>]
# 
# Description
#   The snyk code command finds security issues using Static Code Analysis.
# 
#   For more information see CLI for Snyk Code https://docs.snyk.io/snyk-code/cli-for-snyk-code
# 
# Subcommand: test
#   Test for any known issue.
# 
# Exit codes
#   Possible exit codes and their meaning:
# 
#   0: success, no vulnerabilities found
#   1: action_needed, vulnerabilities found
#   2: failure, try to re-run command
#   3: failure, no supported projects detected
# 
# Configure the Snyk CLI
#   You can use environment variables to configure the Snyk CLI and set variables for connecting with
#   the Snyk API; see Configure the Snyk CLI
#   https://docs.snyk.io/features/snyk-cli/configure-the-snyk-cli
# 
# Debug
#   Use the -d option to output the debug logs.
# 
# Options for the code test subcommand
#   --org=<ORG_ID>
#     Specify the <ORG_ID>to run Snyk commands tied to a specific organization. The
#     <ORG_ID> influences private test limits.
# 
#     If you have multiple organizations, you can set a default from the CLI using:
# 
#     $ snyk config set org=<ORG_ID>
# 
#     Set a default to ensure all newly tested projects are tested under your default organization. If
#     you need to override the default, use the --org=<ORG_ID> option.
# 
#     Default: <ORG_ID> that is the current preferred organization in your Account settings
#     https://app.snyk.io/account
# 
#     For more information see the article How to select the organization to use in the CLI https://sup
#     port.snyk.io/hc/en-us/articles/360000920738-How-to-select-the-organization-to-use-in-the-CLI
# 
#   --json
#     Print results in JSON format.
# 
#     Example: $ snyk code test --json
# 
#   --json-file-output=<OUTPUT_FILE_PATH>
#     Save test output in JSON format directly to the specified file, regardless of whether or not you
#     use the --json option.
# 
#     This is useful if you want to display the human-readable test output using stdout and at the same
#     time save the JSON format output to a file.
# 
#     Example: $ snyk code test --json-file-output=vuln.json
# 
#   --sarif
#     Return results in SARIF format.
# 
#     Example: $snyk code
# 
#   --severity-threshold=<low|medium|high|critical>
#     Report only vulnerabilities at the specified level or higher. Note that the Snyk Code
#     configuration issues do not currently use the critical severity level.
# 
# 



##################################################
## Command: snyk config
##################################################
# Config
# Usage
#   snyk config <SUBCOMMAND> [<OPTIONS>]
# 
# Description
#   The snyk config command manages your local Snyk CLI config file, a JSON file located at
#   $XDG_CONFIG_HOME or ~/.config followed by configstore/snyk.json
# 
#   Example: ~/.config/configstore/snyk.json
# 
#   This command does not manage the .snyk file that is part of your project. See the snyk policy and
#   snyk ignore commands.
# 
# Debug
#   Use the -d option to output the debug logs.
# 
# Subcommands
#   get <KEY>
#     Print a config value.
# 
#   set <KEY>=<VALUE>
#     Create a new config value.
# 
#   unset <KEY>
#     Remove a config value.
# 
#   clear
#     Remove all config values.
# 
# Supported <KEY> values
#   api
#     API token to use when calling Snyk API.
# 
#   endpoint
#     Define the API endpoint to use.
# 
#   disable-analytics
#     Turn off analytics reporting.
# 
#   oci-registry-url
#     Configure the OCI registry used in IaC scanning with custom rules.
# 
#   oci-registry-username
#     Configure the username for an OCI registry used in IaC scanning with custom rules.
# 
#   oci-registry-password
#     Configure the password for an OCI registry used in IaC scanning with custom rules.
# 
# 



##################################################
## Command: snyk container
##################################################
# Container
# Usage
#   snyk container <SUBCOMMAND> [<OPTIONS>] [<IMAGE>]
# 
# Description
#   The snyk container command tests container images for vulnerabilities.
# 
#   For more information see Snyk CLI for container security
#   https://docs.snyk.io/products/snyk-container/snyk-cli-for-container-security
# 
# Subcommands
#   test
#     Test for any known vulnerabilities.
# 
#   monitor
#     Capture the container image layers and dependencies and monitor for vulnerabilities on snyk.io
#     https://snyk.io
# 
# Exit codes
#   Possible exit codes and their meaning:
# 
#   0: success, no vulnerabilities found
#   1: action_needed, vulnerabilities found
#   2: failure, try to re-run command
#   3: failure, no supported projects detected
# 
# Configure the Snyk CLI
#   You can use environment variables to configure the Snyk CLI and set variables for connecting with
#   the Snyk API.
# 
#   There are environment variables that apply to the container command; see Configure the Snyk CLI
#   https://docs.snyk.io/features/snyk-cli/configure-the-snyk-cli
# 
# Debug
#   Use the -d option to output the debug logs.
# 
# Options for the container test and container monitor subcommands
#   --print-deps
#     Print the dependency tree before sending it for analysis.
# 
#   --org=<ORG_ID>
#     Specify the <ORG_ID> to run Snyk commands tied to a specific organization. The
#     <ORG_ID> influences some features availability and private test limits.
# 
#     If you have multiple organizations, you can set a default from the CLI using:
# 
#     $ snyk config set org=<ORG_ID>
# 
#     Set a default to ensure all newly tested and monitored projects are tested and monitored under
#     your default organization. If you need to override the default, use the --org=<ORG_ID>
#     option.
# 
#     Default: <ORG_ID> that is the current preferred organization in your Account settings
#     https://app.snyk.io/account
# 
#     For more information see the article How to select the organization to use in the CLI https://sup
#     port.snyk.io/hc/en-us/articles/360000920738-How-to-select-the-organization-to-use-in-the-CLI
# 
#   --file=<FILE_PATH>
#     For more detailed advice, include the path to the Dockerfile for the image.
# 
#   --project-name=<PROJECT_NAME>
#     Specify a custom Snyk project name.
# 
#   --policy-path=<PATH_TO_POLICY_FILE>
#     Manually pass a path to a .snyk policy file.
# 
#   --json
#     Print results in JSON format, useful for integrating with other tools
# 
#     Example: $ snyk container test --json
# 
#   --json-file-output=<OUTPUT_FILE_PATH>
#     Save test output in JSON format directly to the specified file, regardless of whether or not you
#     use the --json option.
# 
#     This is especially useful if you want to display the human-readable test output using stdout and
#     at the same time save the JSON format output to a file.
# 
#     Example: $ snyk container test --json-file-output=vuln.json
# 
#   --sarif
#     Return results in SARIF format. Note this requires the test to be run with --file as well.
# 
#   --sarif-file-output=<OUTPUT_FILE_PATH>
#     Save test output in SARIF format directly to the <OUTPUT_FILE_PATH> file, regardless of
#     whether or not you use the --sarif option.
# 
#     This is especially useful if you want to display the human-readable test output using stdout and
#     at the same time save the SARIF format output to a file.
# 
#   --project-environment=<ENVIRONMENT>[,<ENVIRONMENT>]...>
#     Set the project environment to one or more values (comma-separated). To clear the project
#     environment set --project-environment=
# 
#     Allowed values: frontend, backend, internal, external, mobile, saas, onprem, hosted, distributed
# 
#     For more information see Project attributes https://docs.snyk.io/getting-started/introduction-to-
#     snyk-projects/view-project-information/project-attributes
# 
#   --project-lifecycle=<LIFECYCLE>[,<LIFECYCLE]...>
#     Set the project lifecycle to one or more values (comma-separated). To clear the project lifecycle
#     set --project-lifecycle=
# 
#     Allowed values: production, development, sandbox
# 
#     For more information see Project attributes https://docs.snyk.io/getting-started/introduction-to-
#     snyk-projects/view-project-information/project-attributes
# 
#   --project-business-criticality=<BUSINESS_CRITICALITY>[,<BUSINESS_CRITICALITY>]...>
#     Set the project business criticality to one or more values (comma-separated). To clear the
#     project business criticality set --project-business-criticality=
# 
#     Allowed values: critical, high, medium, low
# 
#     For more information see Project attributes https://docs.snyk.io/getting-started/introduction-to-
#     snyk-projects/view-project-information/project-attributes
# 
#   --project-tags=<TAG>[,<TAG>]...>
#     Set the project tags to one or more values (comma-separated key values pairs with an
#     "=" separator).
# 
#     Example: --project-tags=department=finance,team=alpha
# 
#     To clear the project tags set --project-tags=
# 
#   --tags=<TAG>[,<TAG>]...>
#     This is an alias for --project tags
# 
#   --severity-threshold=<low|medium|high|critical>
#     Report only vulnerabilities at the specified level or higher.
# 
#   --app-vulns
#     Allow detection of vulnerabilities in your application dependencies from container images, as
#     well as from the operating system, all in one single scan.
# 
#   --nested-jars-depth
#     When using --app-vulns use the --nested-jars-depth option to set how many levels of nested jars
#     Snyk is to unpack. Depth must be a number.
# 
#   --exclude-base-image-vulns
#     Do not show vulnerabilities introduced only by the base image. Available when using snyk
#     container test only.
# 
#   --platform=<PLATFORM>
#     For multi-architecture images, specify the platform to test.
# 
#     Supported platforms are: linux/amd64, linux/arm64, linux/riscv64, linux/ppc64le, linux/s390x,
#     linux/386, linux/arm/v7, or linux/arm/v6
# 
#   --username=<CONTAINER_REGISTRY_USERNAME>
#     Specify a username to use when connecting to a container registry. This is ignored in favor of
#     local Docker binary credentials when Docker is present.
# 
#   --password=<CONTAINER_REGISTRY_PASSWORD>
#     Specify a password to use when connecting to a container registry. This is ignored in favor of
#     local Docker binary credentials when Docker is present.
# 
# Examples for the container test command
#   Scan and monitor Docker images
#     $ snyk container test <image>
# 
#     $ snyk container monitor <image>
# 
#   Option to get more information including base image remediation
#     --file=path/to/Dockerfile
# 
#   Scan a Docker image created using the given Dockerfile and with a specified policy path
#     $ snyk container test app:latest --file=Dockerfile
# 
#     $ snyk container test app:latest --file=Dockerfile --policy-path=path/to/.snyk
# 
#     For more information and examples see Advanced Snyk Container CLI usage https://docs.snyk.io/snyk
#     -container/snyk-cli-for-container-security/advanced-snyk-container-cli-usage
# 
# 



##################################################
## Command: snyk iac
##################################################
# IAC
# Usage
#   snyk iac <SUBCOMMAND> [<OPTIONS>] [<PATH>]
# 
# Description
#   The snyk iac subcommands find and report security issues in Infrastructure as Code files; detect,
#   track, and alert on infrastructure drift and unmanaged resources; and create a .driftigore file.
# 
#   For more information see Snyk CLI for Infrastructure as Code
#   https://docs.snyk.io/products/snyk-infrastructure-as-code/snyk-cli-for-infrastructure-as-code
# 
# Subcommands and the help docs
#   All the iac commands are listed here with the help docs.
# 
#   -  iac test; iac test --help: tests for any known security issue.
#   -  iac describe; iac describe--help: detects infrastructure drift and unmanaged cloud resources
#      Example: snyk iac describe --only-unmanaged
#   -  iac update-exclude-policy; iac update-exclude-policy --help: auto-generates .snyk exclusions for
#      cloud resources
#      Example: snyk iac describe --json --all | snyk iac update-exclude-policy
# 
# 



##################################################
## Command: snyk ignore
##################################################
# Ignore
# Usage
#   snyk ignore --id=<ISSUE_ID> [--expiry=] [--reason=]
#   [--policy-path=<PATH_TO_POLICY_FILE>] [--path=<PATH_TO_RESOURCE>] [OPTIONS]
# 
#   OR
# 
#   snyk ignore [--expiry=] [--reason=] [--policy-path=<PATH_TO_POLICY_FILE>]
#   --file-path=<PATH_TO_RESOURCE>] [OPTIONS]
# 
# Description
#   The snyk ignore command modifies the .snyk policy file to ignore a stated issue according to its
#   snyk ID for all occurrences or to ignore paths on the filesystem.
# 
#   This updates your local .snyk file to contain a block similar to the following:
# 
#   ignore:
#     '<ISSUE_ID>':
#       - '*':
#           reason: <REASON>
#           expires: <EXPIRY>
# 
#   When you use the --path option the block is similar to this:
# 
#   ignore:
#     '<ISSUE_ID>':
#       - '<PATH_TO_RESOURCE>':
#           reason: <REASON>
#           expires: <EXPIRY>
# 
#   When you use the --file-path option the block is similar to this:
# 
#   exclude:
#     '<GROUP>':
#       - <FILE MATCHING-PATTERN>
#       - <FILE MATCHING-PATTERN>:
#         reason: <REASON>
#         expires: <EXPIRY>
#         created: <CREATION TIME>
# 
# Debug
#   Use the -d option to output the debug logs.
# 
# Options
#   --id=<ISSUE_ID>
#     Snyk ID for the issue to ignore, omitted if used with --file-path; required by other use cases.
# 
#   --expiry=<EXPIRY>
#     Expiry date in YYYY-MM-DD format.
# 
#     Supported formats:
# 
#     ISO 8601 https://www.iso.org/iso-8601-date-and-time-format.html
# 
#     RFC 2822 https://tools.ietf.org/html/rfc2822
# 
#     Default: 30 days or none if used with --file-path
# 
#   --reason=<REASON>
#     Human-readable <REASON> to ignore this issue.
# 
#     Default: none
# 
#   --policy-path=<PATH_TO_POLICY_FILE>
#     Path to a .snyk policy file to pass manually.
# 
#     Default: none
# 
#   --path=<PATH_TO_RESOURCE>
#     Path to resource inside the depgraph for which to ignore the issue.
# 
#     Use to narrow the scope of the ignore rule. When no resource path is specified, all resources are
#     ignored.
# 
#     If used, follows the --policy-path option.
# 
#     Default: all
# 
#   --file-path=<PATH_TO_RESOURCE>
#     Filesystem for which to ignore the issue. Used by snyk code and snyk test --unmanaged
# 
#     Default: none
# 
#   --file-path-group=[global|code|iac-drift]
#     Grouping used in combination with --file-path, otherwise omitted.
# 
#     Default: global
# 
# Examples for snyk ignore command
#   Ignore a specific vulnerability
#     $ snyk ignore --id='npm:qs:20170213' --expiry='2021-01-10' --reason='Module not affected by this vulnerability'
# 
#   Ignore a specific vulnerability with a resource path specified
#     $ snyk ignore --id='SNYK-JS-PATHPARSE-1077067' --expiry='2021-01-10' --path='nyc@11.9.0 > istanbul-lib-report@1.1.3 > path-parse@1.0.5' --reason='Module not affected by this vulnerability'
# 
#   Ignore a specific vulnerability for 30 days
#     $ snyk ignore --id=npm:tough-cookie:20160722
# 
#   Ignore a specific file until 2031-01-20
#     Ignore a specific file, used by snyk test --unmanaged until 2031-01-20, with a description as a
#     reference for the future.
# 
#     $ snyk ignore --file-path='./deps/curl-7.58.0/src/tool_msgs.c' --expiry='2031-01-20' --reason='patched file'
# 
#   Ignore files or folders using glob expression
#     Ignore files matching a glob expression by adding them to a specific group.
# 
#     $ snyk ignore --file-path='./**/vendor/**/*.cpp' --file-path-group='global'
# 
# 



##################################################
## Command: snyk log4shell
##################################################
# Log4shell
# Usage
#   snyk log4shell
# 
# Description
#   The snyk log4shell command finds traces of the Log4J library that are affected by the Log4Shell
#   vulnerability CVE-2021-44228 https://security.snyk.io/vuln/SNYK-JAVA-ORGAPACHELOGGINGLOG4J-2314720
# 
#   The command finds traces of the Log4J library even if it is not declared in the manifest files
#   (such as pom.xml or build.gradle).
# 
# Managed projects
#   To test for Log4Shell vulnerabilities in Java projects using their package manager manifest files,
#   use the snyk test command. See the test command help (snyk test --help) and Snyk for Java and
#   Kotlin https://docs.snyk.io/products/snyk-open-source/language-and-package-manager-support/snyk-for
#   -java-gradle-maven
# 
#   To test unmanaged files, use snyk test --scan-all-unmanaged
# 
#   See the Maven options section of the test command help; snyk test --help
# 
# Exit codes
#   Possible exit codes and their meaning:
# 
#   0: success, Log4Shell not found
#   1: action_needed, Log4Shell found
#   2: failure, try to re-run command
# 
# Debug
#   Use the -d option to output the debug logs.
# 
# 



##################################################
## Command: snyk monitor
##################################################
# Monitor
# Usage
#   snyk monitor [<OPTIONS>]
# 
# Description
#   The snyk monitor command creates a project in your Snyk account to be continuously monitored for
#   open source vulnerabilities and license issues. After running this command, log in to the Snyk
#   website and view your projects to see the monitor.
# 
# Exit codes
#   Possible exit codes and their meaning:
# 
#   0: success, snapshot created
#   2: failure, try to re-run command
#   3: failure, no supported projects detected
# 
# Configure the Snyk CLI
#   You can use environment variables to configure the Snyk CLI and and set variables for connecting
#   with the Snyk API. See Configure the Snyk CLI
#   https://docs.snyk.io/features/snyk-cli/configure-the-snyk-cli
# 
# Debug
#   Use the -d option to output the debug logs.
# 
# Options
#   See also subsequent sections for options for specific build environments, package managers,
#   languages and [<CONTEXT-SPECIFIC OPTIONS>] which you specify last.
# 
#   --all-projects
#     Auto-detect all projects in the working directory (including Yarn workspaces).
# 
#     For more information see the article Does the Snyk CLI support monorepos or multiple manifest
#     files? https://support.snyk.io/hc/en-us/articles/360000910577-Does-the-Snyk-CLI-support-monorepos
#     -or-multiple-manifest-files-
# 
#   --detection-depth=<DEPTH>
#     Use with --all-projects or --yarn-workspaces to indicate how many subdirectories to search. DEPTH
#     must be a number, 1 or greater; zero (0) is the current directory.
# 
#     Default: 4, the current working directory (0) and 4 subdirectories.
# 
#     Example: --detection-depth=3 limits search to the specified directory (or the current directory
#     if no <PATH> is specified) plus three levels of subdirectories; zero (0) is the current
#     directory.
# 
#   --exclude=<GLOB>[,<GLOB>]...>
#     Use with --all-projects and --yarn-workspaces to indicate subdirectories and files to exclude.
# 
#     The --exclude argument must be a comma separated list of directory or file names and cannot
#     contain a path.
# 
#     Note that the glob does need to be an exact match and needs only to be part of the path or the
#     filename.
# 
#     Use the --exclude option with --detection-depth to ignore directories at any depth.
# 
#     Examples:
# 
#     Exclude any folders, subfolders, or files containing test as part of the path or name:
#     --exclude=test
# 
#     Exclude any folders, subfolders, or files containing fixtures or debug as part of the path or
#     name:
#     --exclude=fixtures,debug
# 
#   --prune-repeated-subdependencies, -p
#     Prune dependency trees, removing duplicate sub-dependencies.
# 
#     Continues to find all vulnerabilities, but may not find all of the vulnerable paths.
# 
#   --print-deps
#     Print the dependency tree before sending it for analysis.
# 
#   --remote-repo-url=<URL>
#     Set or override the remote URL for the repository that you would like to monitor.
# 
#   --dev
#     Include development-only dependencies. Applicable only for some package managers, for example,
#     devDependencies in npm or :development dependencies in Gemfile.
# 
#     Default: scan only production dependencies.
# 
#   --org=<ORG_ID>
#     Specify the <ORG_ID> to run Snyk commands tied to a specific organization. The
#     <ORG_ID> influences some features availability and private test limits.
# 
#     If you have multiple organizations, you can set a default from the CLI using:
# 
#     $ snyk config set org=<ORG_ID>
# 
#     Set a default to ensure all newly monitored projects are created under your default organization.
#     If you need to override the default, use the --org=<ORG_ID> option.
# 
#     Default: <ORG_ID> that is the current preferred organization in your Account settings
#     https://app.snyk.io/account
# 
#     For more information see the article How to select the organization to use in the CLI https://sup
#     port.snyk.io/hc/en-us/articles/360000920738-How-to-select-the-organization-to-use-in-the-CLI
# 
#   --file=<FILE>
#     Specify a package file.
# 
#     When testing locally or monitoring a project, you can specify the file that Snyk should inspect
#     for package information. When the file is not specified, Snyk tries to detect the appropriate
#     file for your project.
# 
#   --package-manager=<PACKAGE_MANAGER_NAME>
#     Specify the name of the package manager when the filename specified with the --file=<FILE>
#     option is not standard. This allows Snyk to find the file.
# 
#     Example: $ snyk monitor --file=req.txt --package-manager=pip
# 
#   --unmanaged
#     For C++ only, scan all files for known open source dependencies.
# 
#     For options you can use with --unmanaged see Options for scanning using --unmanaged
#     https://docs.snyk.io/snyk-cli/commands/monitor#options-for-scanning-using-unmanaged``
# 
#     For more information see Snyk for C/C++ https://docs.snyk.io/products/snyk-open-source/language-a
#     nd-package-manager-support/snyk-for-c-c++``
# 
#   --ignore-policy
#     Ignore all set policies, the current policy in the .snyk file, org level ignores, and the project
#     policy on snyk.io.
# 
#   --trust-policies
#     Apply and use ignore rules from the Snyk policies your dependencies; otherwise ignore rules in
#     the dependencies are only shown as a suggestion.
# 
#   --project-name=<PROJECT_NAME>
#     Specify a custom Snyk project name.
# 
#     Example: $ snyk monitor --project-name=my-project
# 
#   --target-reference=<TARGET_REFERENCE>
#     Specify a reference which differentiates this project, for example, a branch name or version.
#     Projects having the same reference can be grouped based on that reference. Supported for Snyk
#     Open Source and use with --unmanaged.
# 
#     For more information see Separating projects by branch or version https://docs.snyk.io/snyk-cli/s
#     ecure-your-projects-in-the-long-term/grouping-projects-by-branch-or-version
# 
#   --policy-path=<PATH_TO_POLICY_FILE>
#     Manually pass a path to a .snyk policy file.
# 
#   --json
#     Print results in JSON format.
# 
#   --project-environment=<ENVIRONMENT>[,<ENVIRONMENT>]...>
#     Set the project environment project attribute to one or more values (comma-separated). To clear
#     the project environment set --project-environment=
# 
#     Allowed values: frontend, backend, internal, external, mobile, saas, onprem, hosted, distributed
# 
#     For more information see Project attributes https://docs.snyk.io/getting-started/introduction-to-
#     snyk-projects/view-project-information/project-attributes
# 
#   --project-lifecycle=<LIFECYCLE>[,<LIFECYCLE>]...>
#     Set the project lifecycle project attribute to one or more values (comma-separated). To clear the
#     project lifecycle set --project-lifecycle=
# 
#     Allowed values: production, development, sandbox
# 
#     For more information see Project attributes https://docs.snyk.io/getting-started/introduction-to-
#     snyk-projects/view-project-information/project-attributes
# 
#   --project-business-criticality=<BUSINESS_CRITICALITY>[,<BUSINESS_CRITICALITY>]...>
#     Set the project business criticality project attribute to one or more values (comma-separated).
#     To clear the project business criticality set --project-business-criticality=
# 
#     Allowed values: critical, high, medium, low
# 
#     For more information see Project attributes https://docs.snyk.io/getting-started/introduction-to-
#     snyk-projects/view-project-information/project-attributes
# 
#   --project-tags=<TAG>[,<TAG>]...>
#     Set the project tags to one or more values (comma-separated key value pairs with an "="
#     separator), for example, --project-tags=department=finance,team=alpha To clear the project tags
#     set --project-tags=
# 
#   --tags=<TAG>[,<TAG>]...>
#     This is an alias for --project-tags
# 
# Options for Maven projects
#   For more information about Maven CLI options see Snyk for Java and Kotlin https://docs.snyk.io/prod
#   ucts/snyk-open-source/language-and-package-manager-support/snyk-for-java-gradle-maven
# 
#   --scan-all-unmanaged
#     Auto-detect maven jars, aars, and wars in given directory. To monitor individually use
#     --file=<JAR_FILE_NAME>
# 
#     Note: Custom-built jar files, even with open source dependencies, are out of scope.
# 
#   --reachable
#     Analyze your source code to find which vulnerable functions and packages are called. Cannot be
#     used with --all-projects
# 
#   --reachable-timeout=<TIMEOUT>
#     Specify the amount of time (in seconds) to wait for Snyk to gather reachability data. If it takes
#     longer than <TIMEOUT>, reachable vulnerabilities are not reported. This does not affect
#     regular test or monitor output.
# 
#     Default: 300 (5 minutes).
# 
# Options for Gradle projects
#   For more information about Gradle CLI options see Snyk for Java and Kotlin https://docs.snyk.io/pro
#   ducts/snyk-open-source/language-and-package-manager-support/snyk-for-java-gradle-maven
# 
#   --sub-project=<NAME>, --gradle-sub-project=<NAME>
#     For Gradle "multi project" configurations, monitor a specific sub-project.
# 
#   --all-sub-projects
#     For "multi project" configurations, monitor all sub-projects.
# 
#   --configuration-matching=<CONFIGURATION_REGEX>
#     Resolve dependencies using only configuration(s) that match the specified Java regular
#     expression.
# 
#     Example: ^releaseRuntimeClasspath$
# 
#   --configuration-attributes=<ATTRIBUTE>[,<ATTRIBUTE>]...
#     Select certain values of configuration attributes to install dependencies and perform dependency
#     resolution.
# 
#     Example: buildtype:release,usage:java-runtime
# 
#   --reachable
#     Analyze your source code to find which vulnerable functions and packages are called.
# 
#   --reachable-timeout=<TIMEOUT>
#     Specify the amount of time (in seconds) to wait for Snyk to gather reachability data. If it takes
#     longer than <TIMEOUT>, reachable vulnerabilities are not reported. This does not affect
#     regular test or monitor output.
# 
#     Default: 300 (5 minutes).
# 
#   --init-script=<FILE
#     Use for projects that contain a Gradle initialization script.
# 
# Options for NuGet projects
#   --assets-project-name
#     When monitoring a .NET project using NuGet PackageReference use the project name in
#     project.assets.json, if found.
# 
#   --packages-folder
#     Specify a custom path to the packages folder.
# 
#   --project-name-prefix=<PREFIX_STRING>
#     When monitoring a .NET project, use this option to add a custom prefix to the name of files
#     inside a project along with any desired separators.
# 
#     Example: snyk monitor --file=my-project.sln --project-name-prefix=my-group/
# 
#     This is useful when you have multiple projects with the same name in other .sln files.
# 
# Option for npm projects
#   --strict-out-of-sync=true|false
#     Control monitoring out-of-sync lockfiles.
# 
#     Default: true
# 
# Options for Yarn projects
#   --strict-out-of-sync=true|false
#     Control monitoring out-of-sync lockfiles.
# 
#     Default: true
# 
#   --yarn-workspaces
#     Detect and scan Yarn workspaces. You can specify how many sub-directories to search using
#     --detection-depth and exclude directories and files using --exclude. Alternatively scan Yarn
#     workspaces with other projects using --all-projects
# 
# Option for CocoaPods projects
#   --strict-out-of-sync=true|false
#     Control monitoring out-of-sync lockfiles.
# 
#     Default: false
# 
# Options for Python projects
#   --command=<COMMAND>
#     Indicate which specific Python commands to use based on Python version. The default is python
#     which executes your default python version. Run 'python -V' to find out what version it
#     is. If you are using multiple Python versions, use this parameter to specify the correct Python
#     command for execution.
# 
#     Default: python Example: --command=python3
# 
#   --skip-unresolved=true|false
#     Allow skipping packages that are not found in the environment.
# 
# Options for scanning using --unmanaged
#   [`--org=<ORG_ID>`](monitor.md#org-less-than-org\_id-greater-than)
#   [`--json`](monitor.md#json)
#   [`--target-reference=<TARGET_REFERENCE>`](monitor.md#target-reference-less-than-target\_reference-greater-than)
#   --target-dir
#     Scan the path specified in the argument instead of the current directory.
# 
#     Alternatively, run snyk test --unmanaged
# 
#   --max-depth
#     Usage: --max-depth=1 Specify the maximum level of archive extraction.
# 
#     Use 0 to disable archive extraction completely.
# 
#   --project-name=c-project
#     Use with the snyk monitor --unmanaged command to override the default name Snyk gives your
#     snapshots by entering the desired name.
# 
# Options for build tools
#   -- [<CONTEXT-SPECIFIC_OPTIONS>]
#     Use a double dash (--) after the complete Snyk command to pass options (arguments, flags) that
#     follow directly to the build tool, for example Gradle or Maven.
# 
#     The format is snyk <command> -- [<context-specific_options>]
# 
#     Example: snyk monitor -- --build-cache
# 
# 



##################################################
## Command: snyk policy
##################################################
# Policy
# Usage
#   snyk policy [<PATH_TO_POLICY_FILE>] [<OPTIONS>]
# 
# Description
#   The snyk policy command displays the .snyk policy file for a package.
# 
# Argument: <PATH_TO_POLICY_FILE>
#   Manually pass a path to a .snyk policy file.
# 
# Debug
#   Use -d option to output the debug logs.
# 
# 



##################################################
## Command: snyk test
##################################################
# Test
# Usage
#   snyk test [<OPTIONS>]
# 
# Description
#   The snyk test command checks projects for open source vulnerabilities and license issues. The test
#   command tries to auto-detect supported manifest files with dependencies and test those.
# 
# Exit codes
#   Possible exit codes and their meaning:
# 
#   0: success, no vulnerabilities found
#   1: action_needed, vulnerabilities found
#   2: failure, try to re-run command
#   3: failure, no supported projects detected
# 
# Configure the Snyk CLI
#   You can use environment variables to configure the Snyk CLI and set variables for connecting with
#   the Snyk API. See Configure the Snyk CLI
#   https://docs.snyk.io/features/snyk-cli/configure-the-snyk-cli
# 
# Debug
#   Use the -d option to output the debug logs.
# 
# Options
#   See also subsequent sections for options for specific build environments, package managers,
#   languages, and [<CONTEXT-SPECIFIC OPTIONS>] which you specify last.
# 
#   --all-projects
#     Auto-detect all projects in the working directory (including Yarn workspaces).
# 
#     For more information see the article Does the Snyk CLI support monorepos or multiple manifest
#     files? https://support.snyk.io/hc/en-us/articles/360000910577-Does-the-Snyk-CLI-support-monorepos
#     -or-multiple-manifest-files-
# 
#   --detection-depth=<DEPTH>
#     Use with --all-projects or --yarn-workspaces to indicate how many subdirectories to search. DEPTH
#     must be a number, 1 or greater; zero (0) is the current directory.
# 
#     Default: 4 , the current working directory (0) and 4 subdirectories.
# 
#     Example: --detection-depth=3 limits search to the specified directory (or the current directory
#     if no <PATH> is specified) plus three levels of subdirectories; zero (0) is the current
#     directory.
# 
#   --exclude=<GLOB>[,<GLOB>]...>
#     Use with --all-projects and --yarn-workspaces to indicate subdirectories and files to exclude.
# 
#     The --exclude argument must be a comma separated list of directory or file names and cannot
#     contain a path.
# 
#     Note that the glob does need to be an exact match and needs only to be part of the path or the
#     filename.
# 
#     Use the --exclude option with --detection-depth to ignore directories at any depth.
# 
#     Examples:
# 
#     Exclude any folders, subfolders, or files containing test as part of the path or name:
#     --exclude=test
# 
#     Exclude any folders, subfolders, or files containing fixtures or debug as part of the path or
#     name:
#     --exclude=fixtures,debug
# 
#   --prune-repeated-subdependencies, -p
#     Prune dependency trees, removing duplicate sub-dependencies.
# 
#     Continues to find all vulnerabilities, but may not find all of the vulnerable paths.
# 
#   --print-deps
#     Print the dependency tree before sending it for analysis.
# 
#   --remote-repo-url=<URL>
#     Set or override the remote URL for the repository that you would like to monitor.
# 
#   --dev
#     Include development-only dependencies. Applicable only for some package managers, for example,
#     devDependencies in npm or :development dependencies in Gemfile.
# 
#     Default: scan only production dependencies.
# 
#   --org=<ORG_ID>
#     Specify the <ORG_ID> to run Snyk commands tied to a specific organization. The
#     <ORG_ID> influences some features availability and private test limits.
# 
#     If you have multiple organizations, you can set a default from the CLI using:
# 
#     $ snyk config set org=<ORG_ID>
# 
#     Set a default to ensure all newly tested projects are tested under your default organization. If
#     you need to override the default, use the --org=<ORG_ID> option.
# 
#     Default: <ORG_ID> that is the current preferred organization in your Account settings
#     https://app.snyk.io/account
# 
#     For more information see the article How to select the organization to use in the CLI https://sup
#     port.snyk.io/hc/en-us/articles/360000920738-How-to-select-the-organization-to-use-in-the-CLI
# 
#   --file=<FILE>
#     Specify a package file.
# 
#     When testing locally or monitoring a project, you can specify the file that Snyk should inspect
#     for package information. When the file is not specified, Snyk tries to detect the appropriate
#     file for your project.
# 
#   --package-manager=<PACKAGE_MANAGER_NAME>
#     Specify the name of the package manager when the filename specified with the --file=<FILE>
#     option is not standard. This allows Snyk to find the file.
# 
#     Example: $ snyk test --file=req.txt --package-manager=pip
# 
#   --unmanaged
#     For C++ only, scan all files for known open source dependencies.
# 
#     For options you can use with --unmanaged see Options for scanning using --unmanaged
#     https://docs.snyk.io/snyk-cli/commands/test#options-for-scanning-using-unmanaged``
# 
#     For more information see Snyk for C/C++ https://docs.snyk.io/products/snyk-open-source/language-a
#     nd-package-manager-support/snyk-for-c-c++
# 
#   --ignore-policy
#     Ignore all set policies, the current policy in the .snyk file, org level ignores, and the project
#     policy on snyk.io.
# 
#   --trust-policies
#     Apply and use ignore rules from the Snyk policies your dependencies; otherwise ignore rules in
#     the dependencies are only shown as a suggestion.
# 
#   --show-vulnerable-paths=<none|some|all>
#     Display the dependency paths from the top level dependencies down to the vulnerable packages. Not
#     supported with --json-file-output.
# 
#     Default: some (a few example paths shown). false is an alias for none
# 
#     Example: --show-vulnerable-paths=none
# 
#   --project-name=<PROJECT_NAME>
#     Specify a custom Snyk project name.
# 
#   --target-reference=<TARGET_REFERENCE>
#     Specify a reference which differentiates this project, for example, a branch name or version.
#     Projects having the same reference can be grouped based on that reference. Only supported for
#     Snyk Open Source.
# 
#     For more information see Separating projects by branch or version https://docs.snyk.io/snyk-cli/s
#     ecure-your-projects-in-the-long-term/grouping-projects-by-branch-or-version
# 
#   --policy-path=<PATH_TO_POLICY_FILE>
#     Manually pass a path to a .snyk policy file.
# 
#   --json
#     Print results in JSON format.
# 
#     Example: $ snyk test --json
# 
#   --json-file-output=<OUTPUT_FILE_PATH>
#     Save test output in JSON format directly to the specified file, regardless of whether or not you
#     use the --json option.
# 
#     This is useful if you want to display the human-readable test output using stdout and at the same
#     time save the JSON format output to a file.
# 
#     Example: $ snyk test --json-file-output=vuln.json
# 
#   --sarif
#     Return results in SARIF format.
# 
#   --sarif-file-output=<OUTPUT_FILE_PATH>
#     Save test output in SARIF format directly to the <OUTPUT_FILE_PATH> file, regardless of
#     whether or not you use the --sarif option.
# 
#     This is especially useful if you want to display the human-readable test output using stdout and
#     at the same time save the SARIF format output to a file.
# 
#   --severity-threshold=<low|medium|high|critical>
#     Report only vulnerabilities at the specified level or higher.
# 
#   --fail-on=<all|upgradable|patchable>
#     Fail only when there are vulnerabilities that can be fixed.
# 
#     -  all: fail when there is at least one vulnerability that can be either upgraded or patched.
#     -  upgradable: fail when there is at least one vulnerability that can be upgraded.
#     -  patchable: fail when there is at least one vulnerability that can be patched.
# 
#     If vulnerabilities do not have a fix and this option is being used, tests pass.
# 
# Options for Maven projects
#   For more information about Maven CLI options see Snyk for Java and Kotlin https://docs.snyk.io/prod
#   ucts/snyk-open-source/language-and-package-manager-support/snyk-for-java-gradle-maven
# 
#   --scan-all-unmanaged
#     Auto-detect maven jars, aars, and wars in given directory. To test individually use
#     --file=<JAR_FILE_NAME>
# 
#     Note: Custom-built jar files, even with open source dependencies, are out of scope.
# 
#   --reachable
#     Analyze your source code to find which vulnerable functions and packages are called. Cannot be
#     used with --all-projects
# 
#   --reachable-timeout=<TIMEOUT>
#     Specify the amount of time (in seconds) to wait for Snyk to gather reachability data. If it takes
#     longer than <TIMEOUT>, reachable vulnerabilities are not reported. This does not affect
#     regular test or monitor output.
# 
#     Default: 300 (5 minutes).
# 
# Options for Gradle projects
#   For more information about Gradle CLI options see Snyk for Java and Kotlin https://docs.snyk.io/pro
#   ducts/snyk-open-source/language-and-package-manager-support/snyk-for-java-gradle-maven
# 
#   --sub-project=<NAME>, --gradle-sub-project=<NAME>
#     For Gradle "multi project" configurations, test a specific sub-project.
# 
#   --all-sub-projects
#     For "multi project" configurations, test all sub-projects.
# 
#   --configuration-matching=<CONFIGURATION_REGEX>
#     Resolve dependencies using only configuration(s) that match the specified Java regular expression
# 
#     Example: ^releaseRuntimeClasspath$
# 
#   --configuration-attributes=<ATTRIBUTE>[,<ATTRIBUTE>]...
#     Select certain values of configuration attributes to install dependencies and perform dependency
#     resolution.
# 
#     Example: buildtype:release,usage:java-runtime
# 
#   --reachable
#     Analyze your source code to find which vulnerable functions and packages are called.
# 
#   --reachable-timeout=<TIMEOUT>
#     Specify the amount of time (in seconds) to wait for Snyk to gather reachability data. If it takes
#     longer than <TIMEOUT>, reachable vulnerabilities are not reported. This does not affect
#     regular test or monitor output.
# 
#     Default: 300 (5 minutes).
# 
#   --init-script=<FILE
#     Use for projects that contain a Gradle initialization script.
# 
# Options for NuGet projects
#   --assets-project-name
#     When monitoring a .NET project using NuGet PackageReference use the project name in
#     project.assets.json if found.
# 
#   --packages-folder
#     Specify a custom path to the packages folder.
# 
#   --project-name-prefix=<PREFIX_STRING>
#     When monitoring a .NET project, use this option to add a custom prefix to the name of files
#     inside a project along with any desired separators.
# 
#     Example: snyk monitor --file=my-project.sln --project-name-prefix=my-group/
# 
#     This is useful when you have multiple projects with the same name in other .sln files.
# 
# Option for npm projects
#   --strict-out-of-sync=true|false
#     Control testing out-of-sync lockfiles.
# 
#     Default: true
# 
# Options for Yarn projects
#   --strict-out-of-sync=true|false
#     Control testing out-of-sync lockfiles.
# 
#     Default: true
# 
#   --yarn-workspaces
#     Detect and scan Yarn workspaces. You can specify how many sub-directories to search using
#     --detection-depth and exclude directories and files using --exclude. Alternatively scan Yarn
#     workspaces with other projects using --all-projects
# 
# Option for CocoaPods projects
#   --strict-out-of-sync=true|false
#     Control testing out-of-sync lockfiles.
# 
#     Default: false
# 
# Options for Python projects
#   --command=<COMMAND>
#     Indicate which specific Python commands to use based on Python version. The default is python
#     which executes your default python version. Run 'python -V' to find out what version it
#     is. If you are using multiple Python versions, use this parameter to specify the correct Python
#     command for execution.
# 
#     Default: python Example: --command=python3
# 
#   --skip-unresolved=true|false
#     Allow skipping packages that are not found in the environment.
# 
# Options for Go projects
#   Currently the following options are not supported:
# 
#   --fail-on=<all|upgradable|patchable>
# 
# Options for scanning using --unmanaged
#   [`--org=<ORG_ID>`](test.md#org-less-than-org\_id-greater-than)
#   [`--json`](test.md#json)
#   --json-file-output=<OUTPUT_FILE_PATH>
#   --target-dir
#     Scan the path specified in the argument instead of the current directory.
# 
#     Alternatively, run snyk test --unmanaged
# 
#   --max-depth
#     Usage: --max-depth=1 Specify the maximum level of archive extraction.
# 
#     Use 0 to disable archive extraction completely.
# 
# Options for build tools
#   -- [<CONTEXT-SPECIFIC_OPTIONS>]
#     Use a double dash (--) after the complete Snyk command to pass options (arguments, flags) that
#     follow directly to the build tool, for example Gradle or Maven.
# 
#     The format is snyk <command> -- [<context-specific_options>]
# 
#     Example: snyk test -- --build-cache
# 
# Examples for the snyk test command
#   Test a project in the current folder for known vulnerabilities:
# 
#   $ snyk test
# 
#   Test a specific dependency for vulnerabilities:
# 
#   $ snyk test ionic@1.6.5
# 
#   Test the latest version of an npm package:
# 
#   $ snyk test lodash
# 
#   Test a public GitHub repository:
# 
#   $ snyk test https://github.com/snyk-labs/nodejs-goof
# 
# 



